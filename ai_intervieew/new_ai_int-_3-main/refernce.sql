-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.ai_analysis_results (
  analysis_type text NOT NULL,
  function_name text NOT NULL,
  created_by uuid NOT NULL,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  input_parameters jsonb NOT NULL DEFAULT '{}'::jsonb,
  analysis_result jsonb NOT NULL DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  status text NOT NULL DEFAULT 'completed'::text,
  CONSTRAINT ai_analysis_results_pkey PRIMARY KEY (id)
);
CREATE TABLE public.available_certifications (
  certification_name text NOT NULL,
  issuing_authority text,
  description text,
  duration text,
  cost numeric,
  external_url text,
  requirements text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT available_certifications_pkey PRIMARY KEY (id)
);
CREATE TABLE public.employee_certifications (
  employee_id uuid NOT NULL,
  certification_name text NOT NULL,
  certification_type text NOT NULL,
  provider text NOT NULL,
  certification_number text,
  issue_date date NOT NULL,
  expiry_date date,
  verification_url text,
  cost numeric,
  last_renewal_date date,
  next_renewal_date date,
  department text,
  skill_level text CHECK (skill_level = ANY (ARRAY['beginner'::text, 'intermediate'::text, 'advanced'::text, 'expert'::text])),
  notes text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  status text NOT NULL DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'expired'::text, 'suspended'::text, 'pending_renewal'::text])),
  renewal_required boolean DEFAULT true,
  compliance_required boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT employee_certifications_pkey PRIMARY KEY (id),
  CONSTRAINT employee_certifications_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id)
);
CREATE TABLE public.employee_moves (
  employee_id uuid NOT NULL,
  move_type text NOT NULL CHECK (move_type = ANY (ARRAY['promotion'::text, 'lateral_move'::text, 'department_transfer'::text, 'role_change'::text, 'location_change'::text])),
  previous_position text NOT NULL,
  previous_department text,
  previous_level text,
  previous_manager_id uuid,
  new_position text NOT NULL,
  new_department text,
  new_level text,
  new_manager_id uuid,
  reason text,
  notes text,
  mobility_plan_id uuid,
  requested_by uuid NOT NULL,
  approved_by uuid,
  approval_date timestamp with time zone,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  move_date date NOT NULL DEFAULT CURRENT_DATE,
  effective_date date NOT NULL DEFAULT CURRENT_DATE,
  move_status text NOT NULL DEFAULT 'pending'::text CHECK (move_status = ANY (ARRAY['pending'::text, 'approved'::text, 'executed'::text, 'cancelled'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT employee_moves_pkey PRIMARY KEY (id),
  CONSTRAINT employee_moves_mobility_plan_id_fkey FOREIGN KEY (mobility_plan_id) REFERENCES public.ai_analysis_results(id),
  CONSTRAINT employee_moves_approved_by_fkey FOREIGN KEY (approved_by) REFERENCES auth.users(id),
  CONSTRAINT employee_moves_requested_by_fkey FOREIGN KEY (requested_by) REFERENCES auth.users(id),
  CONSTRAINT employee_moves_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id),
  CONSTRAINT employee_moves_previous_manager_id_fkey FOREIGN KEY (previous_manager_id) REFERENCES public.xlsmart_employees(id),
  CONSTRAINT employee_moves_new_manager_id_fkey FOREIGN KEY (new_manager_id) REFERENCES public.xlsmart_employees(id)
);
CREATE TABLE public.employee_retention_plans (
  employee_id uuid,
  flight_risk_score integer NOT NULL,
  assigned_manager_id uuid,
  success_probability numeric,
  target_completion_date date,
  actual_completion_date date,
  notes text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  risk_factors ARRAY DEFAULT '{}'::text[],
  recommended_actions jsonb DEFAULT '[]'::jsonb,
  plan_status character varying DEFAULT 'pending'::character varying,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT employee_retention_plans_pkey PRIMARY KEY (id),
  CONSTRAINT employee_retention_plans_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id)
);
CREATE TABLE public.employee_skills (
  employee_id uuid NOT NULL,
  skill_name text NOT NULL,
  proficiency_level integer CHECK (proficiency_level >= 1 AND proficiency_level <= 5),
  years_of_experience numeric,
  certification_level text,
  last_assessed_date timestamp with time zone,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT employee_skills_pkey PRIMARY KEY (id),
  CONSTRAINT employee_skills_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id)
);
CREATE TABLE public.employee_training_enrollments (
  employee_id uuid NOT NULL,
  training_program_id uuid NOT NULL,
  recommended_by uuid,
  target_completion_date timestamp with time zone,
  last_activity_date timestamp with time zone,
  notes text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  enrollment_date timestamp with time zone NOT NULL DEFAULT now(),
  enrollment_type text DEFAULT 'self_enrolled'::text CHECK (enrollment_type = ANY (ARRAY['self_enrolled'::text, 'manager_assigned'::text, 'hr_assigned'::text, 'mandatory'::text, 'ai_recommended'::text])),
  priority text DEFAULT 'medium'::text CHECK (priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  status text DEFAULT 'enrolled'::text CHECK (status = ANY (ARRAY['enrolled'::text, 'in_progress'::text, 'completed'::text, 'cancelled'::text, 'failed'::text, 'expired'::text])),
  progress_percentage numeric DEFAULT 0.0,
  time_spent_hours numeric DEFAULT 0.0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT employee_training_enrollments_pkey PRIMARY KEY (id),
  CONSTRAINT employee_training_enrollments_training_program_id_fkey FOREIGN KEY (training_program_id) REFERENCES public.training_programs(id),
  CONSTRAINT employee_training_enrollments_recommended_by_fkey FOREIGN KEY (recommended_by) REFERENCES public.xlsmart_employees(id),
  CONSTRAINT employee_training_enrollments_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id)
);
CREATE TABLE public.employee_trainings (
  employee_id uuid NOT NULL,
  training_name text NOT NULL,
  training_type text,
  provider text,
  start_date date,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  end_date date,
  completion_date date,
  status text CHECK (status = ANY (ARRAY['not_started'::text, 'in_progress'::text, 'completed'::text, 'cancelled'::text])),
  duration_hours numeric,
  cost numeric,
  notes text,
  certification_earned boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT employee_trainings_pkey PRIMARY KEY (id),
  CONSTRAINT employee_trainings_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id)
);
CREATE TABLE public.interview_analytics (
  employee_id uuid NOT NULL,
  department character varying,
  role_category character varying,
  period_start date NOT NULL,
  period_end date NOT NULL,
  average_score numeric,
  improvement_trend character varying,
  skill_progression jsonb,
  career_readiness_score integer CHECK (career_readiness_score >= 0 AND career_readiness_score <= 100),
  development_recommendations ARRAY,
  next_interview_suggested_at timestamp with time zone,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  total_interviews integer DEFAULT 0,
  completed_interviews integer DEFAULT 0,
  promotion_readiness boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT interview_analytics_pkey PRIMARY KEY (id),
  CONSTRAINT interview_analytics_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id)
);
CREATE TABLE public.interview_questions (
  interview_session_id uuid NOT NULL,
  question_text text NOT NULL,
  question_category character varying,
  ai_response text,
  employee_response text,
  response_score integer CHECK (response_score >= 0 AND response_score <= 100),
  response_analysis jsonb,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  asked_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT interview_questions_pkey PRIMARY KEY (id),
  CONSTRAINT interview_questions_interview_session_id_fkey FOREIGN KEY (interview_session_id) REFERENCES public.interview_sessions(id)
);
CREATE TABLE public.interview_sessions (
  employee_id uuid NOT NULL,
  job_description_id uuid NOT NULL,
  scheduled_at timestamp with time zone NOT NULL,
  started_at timestamp with time zone,
  completed_at timestamp with time zone,
  duration_minutes integer,
  job_requirements text,
  interview_notes text,
  transcript jsonb,
  ai_analysis jsonb,
  overall_score integer CHECK (overall_score >= 0 AND overall_score <= 100),
  skill_scores jsonb,
  recommendations ARRAY,
  strengths ARRAY,
  areas_for_improvement ARRAY,
  created_by uuid,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  status character varying NOT NULL DEFAULT 'scheduled'::character varying CHECK (status::text = ANY (ARRAY['scheduled'::character varying, 'in_progress'::character varying, 'completed'::character varying, 'cancelled'::character varying]::text[])),
  interview_type character varying DEFAULT 'role_assessment'::character varying CHECK (interview_type::text = ANY (ARRAY['role_assessment'::character varying, 'promotion'::character varying, 'performance_review'::character varying, 'skill_evaluation'::character varying]::text[])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT interview_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT interview_sessions_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id),
  CONSTRAINT interview_sessions_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id),
  CONSTRAINT interview_sessions_job_description_id_fkey FOREIGN KEY (job_description_id) REFERENCES public.xlsmart_job_descriptions(id)
);
CREATE TABLE public.interview_templates (
  name character varying NOT NULL,
  description text,
  role_category character varying,
  interview_type character varying NOT NULL,
  question_categories jsonb,
  ai_personality jsonb,
  evaluation_criteria jsonb,
  created_by uuid,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  duration_minutes integer DEFAULT 30,
  difficulty_level character varying DEFAULT 'intermediate'::character varying CHECK (difficulty_level::text = ANY (ARRAY['beginner'::character varying, 'intermediate'::character varying, 'advanced'::character varying, 'expert'::character varying]::text[])),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT interview_templates_pkey PRIMARY KEY (id),
  CONSTRAINT interview_templates_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users(id)
);
CREATE TABLE public.profiles (
  user_id uuid NOT NULL UNIQUE,
  email text NOT NULL,
  first_name text,
  last_name text,
  company_name text,
  phone text,
  avatar_url text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  role USER-DEFINED NOT NULL DEFAULT 'candidate'::user_role,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.retention_action_executions (
  retention_plan_id uuid,
  action_type character varying NOT NULL,
  action_description text NOT NULL,
  executed_by uuid,
  effectiveness_rating integer,
  notes text,
  follow_up_date date,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  execution_date timestamp without time zone DEFAULT now(),
  completion_status character varying DEFAULT 'pending'::character varying,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT retention_action_executions_pkey PRIMARY KEY (id),
  CONSTRAINT retention_action_executions_retention_plan_id_fkey FOREIGN KEY (retention_plan_id) REFERENCES public.employee_retention_plans(id)
);
CREATE TABLE public.retention_action_templates (
  action_type character varying NOT NULL,
  action_name character varying NOT NULL,
  description text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  success_rate numeric DEFAULT 65.0,
  average_timeline_days integer DEFAULT 30,
  applicable_risk_levels ARRAY DEFAULT ARRAY['high'::text, 'medium'::text, 'low'::text],
  applicable_roles ARRAY DEFAULT ARRAY['all'::text],
  cost_level character varying DEFAULT 'low'::character varying,
  priority_score integer DEFAULT 50,
  created_at timestamp without time zone DEFAULT now(),
  updated_at timestamp without time zone DEFAULT now(),
  CONSTRAINT retention_action_templates_pkey PRIMARY KEY (id)
);
CREATE TABLE public.role_standardization_mappings (
  session_id uuid NOT NULL,
  original_role_id text,
  original_role_title text NOT NULL,
  original_source text NOT NULL CHECK (original_source = ANY (ARRAY['xl'::text, 'smart'::text])),
  standardized_role_id uuid NOT NULL,
  mapping_reason text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  mapping_confidence numeric DEFAULT 0.0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT role_standardization_mappings_pkey PRIMARY KEY (id),
  CONSTRAINT role_standardization_mappings_standardized_role_id_fkey FOREIGN KEY (standardized_role_id) REFERENCES public.standardized_roles_final(id)
);
CREATE TABLE public.skill_gap_analysis (
  employee_id uuid NOT NULL,
  role_id uuid,
  overall_match_percentage numeric,
  critical_gaps ARRAY,
  recommended_skills ARRAY,
  training_recommendations ARRAY,
  readiness_score numeric,
  gap_severity text CHECK (gap_severity = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'critical'::text])),
  action_items jsonb,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  analysis_date timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  created_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  updated_at timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
  CONSTRAINT skill_gap_analysis_pkey PRIMARY KEY (id),
  CONSTRAINT skill_gap_analysis_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id),
  CONSTRAINT skill_gap_analysis_role_id_fkey FOREIGN KEY (role_id) REFERENCES public.xlsmart_standard_roles(id)
);
CREATE TABLE public.skills_master (
  name text NOT NULL UNIQUE,
  category text NOT NULL,
  description text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT skills_master_pkey PRIMARY KEY (id)
);
CREATE TABLE public.smart_roles_data (
  session_id uuid NOT NULL,
  role_id text,
  department text,
  role_family text,
  role_title text NOT NULL,
  seniority_band text,
  role_purpose text,
  core_responsibilities text,
  required_skills text,
  preferred_skills text,
  certifications text,
  tools_platforms text,
  experience_min_years integer,
  education text,
  location text,
  role_variant text,
  alternate_titles text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT smart_roles_data_pkey PRIMARY KEY (id)
);
CREATE TABLE public.standardized_roles_final (
  session_id uuid NOT NULL,
  standardized_role_title text NOT NULL,
  standardized_department text,
  standardized_role_family text,
  standardized_seniority_band text,
  standardized_role_purpose text,
  standardized_core_responsibilities text,
  standardized_required_skills text,
  standardized_preferred_skills text,
  standardized_certifications text,
  standardized_tools_platforms text,
  standardized_experience_min_years integer,
  standardized_education text,
  standardized_location text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  xl_source_count integer DEFAULT 0,
  smart_source_count integer DEFAULT 0,
  confidence_score numeric DEFAULT 0.0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT standardized_roles_final_pkey PRIMARY KEY (id)
);
CREATE TABLE public.training_analytics (
  training_program_id uuid,
  employee_id uuid,
  department text,
  analysis_period text NOT NULL,
  analysis_date date NOT NULL,
  metric_type text NOT NULL,
  metric_value numeric NOT NULL,
  metric_details jsonb,
  comparison_period_value numeric,
  trend_direction text CHECK (trend_direction = ANY (ARRAY['up'::text, 'down'::text, 'stable'::text])),
  insights ARRAY,
  recommendations ARRAY,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT training_analytics_pkey PRIMARY KEY (id),
  CONSTRAINT training_analytics_training_program_id_fkey FOREIGN KEY (training_program_id) REFERENCES public.training_programs(id),
  CONSTRAINT training_analytics_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id)
);
CREATE TABLE public.training_completions (
  enrollment_id uuid NOT NULL,
  employee_id uuid NOT NULL,
  training_program_id uuid NOT NULL,
  final_score numeric,
  time_to_complete_hours numeric,
  assessment_scores jsonb,
  feedback_rating integer CHECK (feedback_rating >= 1 AND feedback_rating <= 5),
  feedback_comments text,
  skills_acquired ARRAY,
  competency_improvements jsonb,
  certificate_number text,
  certificate_expiry_date timestamp with time zone,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  completion_date timestamp with time zone NOT NULL DEFAULT now(),
  completion_status text NOT NULL DEFAULT 'passed'::text CHECK (completion_status = ANY (ARRAY['passed'::text, 'failed'::text, 'partial'::text, 'expired'::text])),
  passing_score numeric DEFAULT 70.0,
  certificate_issued boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT training_completions_pkey PRIMARY KEY (id),
  CONSTRAINT training_completions_training_program_id_fkey FOREIGN KEY (training_program_id) REFERENCES public.training_programs(id),
  CONSTRAINT training_completions_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id),
  CONSTRAINT training_completions_enrollment_id_fkey FOREIGN KEY (enrollment_id) REFERENCES public.employee_training_enrollments(id)
);
CREATE TABLE public.training_programs (
  name text NOT NULL,
  description text,
  category text NOT NULL,
  type text NOT NULL,
  provider text,
  prerequisites ARRAY,
  learning_objectives ARRAY,
  target_audience ARRAY,
  certification_name text,
  certification_validity_months integer,
  tags ARRAY,
  content_url text,
  instructor_name text,
  instructor_email text,
  start_date timestamp with time zone,
  end_date timestamp with time zone,
  enrollment_deadline timestamp with time zone,
  created_by uuid NOT NULL,
  updated_by uuid,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  duration_hours integer NOT NULL DEFAULT 0,
  duration_weeks integer NOT NULL DEFAULT 0,
  difficulty_level text DEFAULT 'Beginner'::text CHECK (difficulty_level = ANY (ARRAY['Beginner'::text, 'Intermediate'::text, 'Advanced'::text])),
  max_participants integer DEFAULT 50,
  cost_per_participant numeric DEFAULT 0.0,
  certification_provided boolean DEFAULT false,
  schedule_type text DEFAULT 'self_paced'::text CHECK (schedule_type = ANY (ARRAY['self_paced'::text, 'scheduled'::text, 'recurring'::text])),
  status text DEFAULT 'draft'::text CHECK (status = ANY (ARRAY['draft'::text, 'active'::text, 'inactive'::text, 'completed'::text, 'cancelled'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT training_programs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.xl_roles_data (
  session_id uuid NOT NULL,
  role_id text,
  department text,
  role_family text,
  role_title text NOT NULL,
  seniority_band text,
  role_purpose text,
  core_responsibilities text,
  required_skills text,
  preferred_skills text,
  certifications text,
  tools_platforms text,
  experience_min_years integer,
  education text,
  location text,
  role_variant text,
  alternate_titles text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT xl_roles_data_pkey PRIMARY KEY (id)
);
CREATE TABLE public.xlsmart_development_plans (
  employee_id uuid NOT NULL,
  skill_assessment_id uuid,
  target_role text,
  created_by uuid NOT NULL,
  assigned_to uuid NOT NULL,
  reviewed_by uuid,
  last_review_date timestamp with time zone,
  next_review_date timestamp with time zone,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  current_skill_level numeric DEFAULT 0.0,
  target_skill_level numeric DEFAULT 0.0,
  development_areas jsonb DEFAULT '[]'::jsonb,
  recommended_courses jsonb DEFAULT '[]'::jsonb,
  recommended_certifications jsonb DEFAULT '[]'::jsonb,
  recommended_projects jsonb DEFAULT '[]'::jsonb,
  timeline_months integer DEFAULT 12,
  progress_percentage numeric DEFAULT 0.0,
  plan_status text NOT NULL DEFAULT 'active'::text CHECK (plan_status = ANY (ARRAY['active'::text, 'completed'::text, 'paused'::text, 'cancelled'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT xlsmart_development_plans_pkey PRIMARY KEY (id),
  CONSTRAINT xlsmart_development_plans_skill_assessment_id_fkey FOREIGN KEY (skill_assessment_id) REFERENCES public.xlsmart_skill_assessments(id),
  CONSTRAINT xlsmart_development_plans_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id)
);
CREATE TABLE public.xlsmart_employees (
  gender text CHECK (gender = ANY (ARRAY['Male'::text, 'Female'::text, 'Other'::text, 'Prefer not to say'::text])),
  employee_number text NOT NULL UNIQUE,
  source_company text NOT NULL CHECK (lower(source_company) = ANY (ARRAY['xl'::text, 'smart'::text, 'unknown'::text])),
  first_name text NOT NULL,
  last_name text NOT NULL,
  email text NOT NULL,
  phone text,
  current_position text NOT NULL,
  current_department text,
  current_level text,
  hire_date date,
  years_of_experience integer,
  salary numeric,
  manager_id uuid,
  performance_rating numeric,
  uploaded_by uuid NOT NULL,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  currency text DEFAULT 'IDR'::text,
  skills jsonb DEFAULT '[]'::jsonb,
  certifications jsonb DEFAULT '[]'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  standard_role_id uuid,
  ai_suggested_role_id uuid,
  original_role_title text,
  role_assignment_status text DEFAULT 'pending'::text CHECK (role_assignment_status = ANY (ARRAY['pending'::text, 'ai_suggested'::text, 'manually_assigned'::text, 'approved'::text])),
  assigned_by uuid,
  assignment_notes text,
  CONSTRAINT xlsmart_employees_pkey PRIMARY KEY (id),
  CONSTRAINT xlsmart_employees_ai_suggested_role_id_fkey FOREIGN KEY (ai_suggested_role_id) REFERENCES public.xlsmart_standard_roles(id),
  CONSTRAINT xlsmart_employees_standard_role_id_fkey FOREIGN KEY (standard_role_id) REFERENCES public.xlsmart_standard_roles(id),
  CONSTRAINT xlsmart_employees_manager_id_fkey FOREIGN KEY (manager_id) REFERENCES public.xlsmart_employees(id)
);
CREATE TABLE public.xlsmart_job_descriptions (
  job_identity jsonb,
  key_contacts jsonb,
  competencies jsonb,
  template_version character varying DEFAULT 'legacy'::character varying,
  full_description text,
  title text NOT NULL,
  summary text,
  experience_level text,
  education_level text,
  salary_range_min numeric,
  salary_range_max numeric,
  ai_prompt_used text,
  generated_by uuid NOT NULL,
  reviewed_by uuid,
  approved_by uuid,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  responsibilities jsonb DEFAULT '[]'::jsonb,
  required_qualifications jsonb DEFAULT '[]'::jsonb,
  preferred_qualifications jsonb DEFAULT '[]'::jsonb,
  required_skills jsonb DEFAULT '[]'::jsonb,
  preferred_skills jsonb DEFAULT '[]'::jsonb,
  currency text DEFAULT 'IDR'::text,
  employment_type text DEFAULT 'full_time'::text,
  location_type text DEFAULT 'office'::text,
  ai_generated boolean DEFAULT true,
  tone text DEFAULT 'professional'::text,
  language text DEFAULT 'id'::text,
  status text NOT NULL DEFAULT 'draft'::text CHECK (status = ANY (ARRAY['draft'::text, 'review'::text, 'approved'::text, 'published'::text, 'declined'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  standard_role_id uuid,
  CONSTRAINT xlsmart_job_descriptions_pkey PRIMARY KEY (id),
  CONSTRAINT xlsmart_job_descriptions_standard_role_id_fkey FOREIGN KEY (standard_role_id) REFERENCES public.xlsmart_standard_roles(id)
);
CREATE TABLE public.xlsmart_role_catalogs (
  source_company text NOT NULL CHECK (source_company = ANY (ARRAY['XL Axiata'::text, 'Smartfren'::text, 'XL Axiata + Smartfren'::text, 'External'::text])),
  file_name text NOT NULL,
  file_format text NOT NULL CHECK (file_format = ANY (ARRAY['excel'::text, 'xlsx'::text, 'csv'::text, 'json'::text])),
  file_size integer,
  mapping_accuracy numeric,
  uploaded_by uuid NOT NULL,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  total_roles integer DEFAULT 0,
  processed_roles integer DEFAULT 0,
  upload_status text NOT NULL DEFAULT 'pending'::text CHECK (upload_status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT xlsmart_role_catalogs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.xlsmart_role_mappings (
  catalog_id uuid NOT NULL,
  original_role_title text NOT NULL,
  original_department text,
  original_level text,
  standardized_role_title text NOT NULL,
  standardized_department text,
  standardized_level text,
  job_family text,
  reviewed_by uuid,
  reviewed_at timestamp with time zone,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  mapping_confidence numeric DEFAULT 0.0,
  requires_manual_review boolean DEFAULT false,
  mapping_status text NOT NULL DEFAULT 'auto_mapped'::text CHECK (mapping_status = ANY (ARRAY['auto_mapped'::text, 'manual_review'::text, 'approved'::text, 'rejected'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  standard_role_id uuid,
  CONSTRAINT xlsmart_role_mappings_pkey PRIMARY KEY (id),
  CONSTRAINT xlsmart_role_mappings_catalog_id_fkey FOREIGN KEY (catalog_id) REFERENCES public.xlsmart_role_catalogs(id),
  CONSTRAINT xlsmart_role_mappings_standard_role_id_fkey FOREIGN KEY (standard_role_id) REFERENCES public.xlsmart_standard_roles(id)
);
CREATE TABLE public.xlsmart_skill_assessments (
  employee_id uuid NOT NULL,
  assessed_by uuid NOT NULL,
  ai_analysis text,
  recommendations text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  overall_match_percentage numeric DEFAULT 0.0,
  skill_gaps jsonb DEFAULT '[]'::jsonb,
  next_role_recommendations jsonb DEFAULT '[]'::jsonb,
  level_fit_score numeric DEFAULT 0.0,
  job_description_id uuid,
  rotation_risk_score numeric DEFAULT 0.0,
  churn_risk_score numeric DEFAULT 0.0,
  assessment_date timestamp with time zone NOT NULL DEFAULT now(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT xlsmart_skill_assessments_pkey PRIMARY KEY (id),
  CONSTRAINT xlsmart_skill_assessments_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.xlsmart_employees(id),
  CONSTRAINT xlsmart_skill_assessments_job_description_id_fkey FOREIGN KEY (job_description_id) REFERENCES public.xlsmart_job_descriptions(id)
);
CREATE TABLE public.xlsmart_standard_roles (
  role_title text NOT NULL UNIQUE,
  job_family text NOT NULL,
  role_level text NOT NULL,
  role_category text NOT NULL,
  department text NOT NULL,
  standard_description text,
  salary_grade text,
  created_by uuid NOT NULL,
  approved_by uuid,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  core_responsibilities jsonb DEFAULT '[]'::jsonb,
  required_skills jsonb DEFAULT '[]'::jsonb,
  experience_range_min integer DEFAULT 0,
  experience_range_max integer DEFAULT 50,
  education_requirements jsonb DEFAULT '[]'::jsonb,
  is_active boolean DEFAULT true,
  industry_alignment text DEFAULT 'Telecommunications'::text,
  keywords jsonb DEFAULT '[]'::jsonb,
  version integer DEFAULT 1,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT xlsmart_standard_roles_pkey PRIMARY KEY (id)
);
CREATE TABLE public.xlsmart_upload_sessions (
  session_name text NOT NULL,
  file_names ARRAY NOT NULL,
  temp_table_names ARRAY NOT NULL,
  created_by uuid NOT NULL,
  error_message text,
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  total_rows integer DEFAULT 0,
  status text DEFAULT 'uploading'::text CHECK (status = ANY (ARRAY['uploading'::text, 'processing'::text, 'completed'::text, 'error'::text, 'roles_assigned'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  ai_analysis jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT xlsmart_upload_sessions_pkey PRIMARY KEY (id)
);